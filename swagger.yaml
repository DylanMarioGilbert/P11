swagger: '2.0'
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: '1.0.0'
  termsOfService: 'http://swagger.io/terms/'
host: localhost:3001
basePath: /api/v1
schemes:
  - http
paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: '#/definitions/Login'
      produces:
        - application/json
      responses:
        '200':
          description: Login Successfully
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: Signup Successfully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /user/profile:
    post:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      #produces:
       # - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: '#/definitions/UserProfile'
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successully
          schema:
            $ref: '#/definitions/ApiResponse'
        '400':
          description: Invalid Fields
        '500':
          description: Internal Server Error
  /transactions:
    get:
      security:
          - Bearer: []
      tags:
          - Transactions module
      summary: Get all transactions for the current month 
      description: API to fetch all transactions for the current month, grouped by account
      produces : 
        - application/json
      responses:
        '200':
          description: List of transactions retrieved successfully
          schema: 
           type: array
           items: 
            $ref: '#/definitions/Transaction'
        '401':
          description: Unauthorized
        '500':
            description: Internal Server Error
  /transactions/{transactionId}:
    get:
      security:
        - Bearer: []
      tags:
        - Transactions Module
      summary: Get transaction details
      description: API to fetch details of a specific transaction.
      parameters:
        - in: path
          name: transactionId
          required: true 
          type: string
          description: ID of the transaction
      produces:
        - application/json
      responses:
        '200':
          description: Transaction details retrieved successfully
          schema:
            $ref: '#/definitions/Transaction'
        '404':
          description: Transaction not found
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /categories:
    get:
      security:
        - Bearer: []
      tags:
        - Categories Module
      summary: Get all categories
      description: API to fetch all categories
      produces:
        - application/json
      responses:
        '200':
          description: List of categories retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Category'
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    post:
      security:
        - Bearer: []
      tags:
        - Categories Module
      summary: Create a new category
      description: API to create a new category
      parameters:
        - in: body
          name: body
          description: Category payload
          required: true
          schema:
            $ref: '#/definitions/Category'
      produces:
        - application/json
      responses:
        '200':
          description: Category created successfully
          schema:
            $ref: '#/definitions/Category'
        '400':
          description: Invalid Fields
        '404':
          description: Category not found
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /categories/{categoryId}:
    post: 
      security:
        - Bearer: []
      tags:
        - Categories module
      summary: Associate a category with a transaction
      description: API to associate a category with a specific transaction
      parameters: 
        - in: path 
          name: categoryId
          required: true
          type: string
          description: Id of the category
        - in: body
          name: body
          description: Transaction payload to associate with the category
          required: true
          schema: 
            $ref: '#/definitions/TransactionCategoryAssociation'
      produces:
        - application/json
      responses:
        '200':
          description: Category associated with the transaction successfully
          schema: 
            $ref: '#/definitions/Transaction'
        '400':
          description: Invalid Fields
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
  /transactions/{transactionId}/notes:
    post:
      security:
        - Bearer: []
      tags:
        - Notes Module
      summary: Add a note to a transaction
      description: API to add a note to a transaction
      parameters:
        - in: path
          name: transactionId
          required: true
          type: string
          description: ID of the transaction
        - in: body
          name: body
          description: Note to add
          required: true
          schema:
            $ref: '#/definitions/Note'
      produces:
        - application/json
      responses:
        '200':
          description: Note added successfully
          schema:
            $ref: '#/definitions/Note'
        '400':
          description: Invalid Fields
        '404':
          description: Transaction not found
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    get:
      security:
        - Bearer: []
      tags:
        - Notes Module
      summary: Get notes for a transaction
      description: API to fetch notes for a specific transaction
      parameters:
        - in: path
          name: transactionId
          required: true
          type: string
          description: ID of the transaction
      produces:
        - application/json
      responses:
        '200':
          description: Notes retrieved successfully
          schema:
            type: array
            items:
              $ref: '#/definitions/Note'
        '404':
          description: Transaction not found
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    put:
      security:
        - Bearer: []
      tags:
        - Notes Module
      summary: Update a note for a transaction
      description: API to update a note for a specific transaction
      parameters:
        - in: path
          name: transactionId
          required: true
          type: string
          description: ID of the transaction
        - in: body
          name: body
          description: Update note attributes
          required: true
          schema:
            $ref: '#/definitions/Note'
      produces:
        - application/json
      responses:
        '200':
          description: Note updated successfully
          schema:
            $ref: '#/definitions/Note'
        '400':
          description: Invalid Fields
        '404':
          description: Transaction or note not found
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
    delete:
      security:
        - Bearer: []
      tags:
        - Notes Module
      summary: Delete a note for a transaction
      description: API to delete a note for a specific transaction
      parameters:
        - in: path
          name: transactionId
          required: true
          type: string
          description: ID of the transaction
        - in: body
          name: body
          description: Note to delete
          required: true
          schema:
            $ref: '#/definitions/Note'
      produces:
        - application/json
      responses:
        '200':
          description: Note deleted successfully
        '404':
          description: Transaction or note not found
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name
      userName:
        type: string
        description: user public name
  Login:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
  ApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
  LoginResponse:
    type: object
    properties:
      token:
        type: string
  UserProfile:
    type: object
    properties:
      userName:
        type: string
  Transaction:
    type: object
    properties:
      id:
        type: string
        description: ID of the transaction
      accountId:
        type: string
        description: ID of the account associated with the transaction
      amount: 
        type: number
        description: Amount of the transaction
      date:
        type: string
        format: date-time
        description: date and time of the transaction
      description:
        type: string
        description: Description of the transaction
      type:
        type: string
        description: Type of the transaction (e.g., debit, credit)
      category: 
        type: string
        description: Category of the transaction (e.g., food, transport)
  TransactionCategoryAssociation:
    type: object
    required:
      - transactionId
    properties:
      transactionId:
        type: string
        example: txn12345
  Category:
    type: object
    required:
      - name
    properties:
      id:
        type: string
        example: cat12345
      name:
        type: string
        example: Groceries
      description:
        type: string
        example: Expenses related to grocery shopping
  Note:
    type: object
    properties:
      id:
        type: string
        description: ID of the note
      transactionId:
        type: string
        description: ID of the transaction associated with the note
      content:
        type: string
        description: Content of the note
      date:
        type: string
        format: date-time
        description: Date and time the note was created